function out = subVolumeAnalysis(cellData, NSubs, scanUnitLength, writeOutput)

% Brian Long starting 2016.07.28
%
%  input:   cellData is a large cell array of scan data generated by
%               s2FigGen_r00.m
%
%           NSubs is an integer related to the number of subvolumes to be
%               analyzed within each large boundingbox scan
%
%           scanUnitLength is the scan unit size in pixels, determining the
%           size of the subvolumes generated
%
%           writeOutput is a boolean- true will write each subvolume as a
%
%           v3draw file within a subvolume inside the cellData directory
%               if true, this code is expected to generate a lot of files.
%               Once the method has been validated, the written output isnt
%               necessary.

%  this code utilizes Hanchuan's matlab io tools available in the github
%  repo.


%  hardcoded parameters:

scanUnitFolder = 'scanUnitFiles';
thresh1 = 100;  % background threshold
sigFactor  = 3;  % how many sigma above mean for signal threshold

% run through each entry in cellData:
for i = 1:numel(cellData)
    
    % and only analyze the last entry for each cell. this could be modified
    % for more extensive analysis of multiple S2 scans per data directory
    if numel(cellData{i})>1
    iDat = cellData{i}(end);
    else
        iDat=cellData{i};
    end
    
    if ~isfield(iDat, 'BBdata')
        ['neuronNumber = ', num2str(iDat.neuronNumber), ' has no BoundingBox Data.  Skipping iteration ', num2str(i)]
        continue
    end
    
    
    % bounding box location in pixels:
    bbLoc = iDat.BBdata.tileLocations{1};
    bbSize = [ bbLoc(3)-bbLoc(1), bbLoc(4)-bbLoc(2)];
    
    %  actual boundingbox data:
    
    [a1, a2] = fileparts(iDat.BBdata.folderName);
    if findstr(a2,'ZSeries')
        BBdir = a1;
    else
        BBdir = iDat.BBdata.folderName;
    end
    
    fileLocation = dir(fullfile(BBdir, '*ZSeries*.tif.v3draw'));
    if isempty(fileLocation)
        ['neuronNumber = ', num2str(iDat.neuronNumber), ' has no BoundingBox Image Data.  Skipping iteration ', num2str(i)]
        continue
    else
        
        bbImage = permute(load_v3d_raw_img_file(fullfile(BBdir, fileLocation(1).name)),[2,1,3]);
        thresh2 = mean(bbImage(bbImage(:)>thresh1))+ sigFactor*std(double(bbImage(bbImage(:)>thresh1)));
        
    end
    
    
    %  now identify NSubs subvolumes
    if NSubs ==0
        
        ncols = ceil(bbSize(1)/scanUnitLength);
        nrows = ncols;
        rowStep = scanUnitLength;
        colStep = scanUnitLength;
    elseif ((NSubs <=4) && (NSubs >0))
                
        ncols = NSubs*ceil(bbSize(1)/scanUnitLength);
        nrows = ncols;
        rowStep = floor(scanUnitLength/NSubs);
        colStep = rowStep;
    else
        
        ncols = ceil(sqrt(NSubs));
        nrows = ncols;   
        %  spacing of subvolumes:
    rowStep = floor(bbSize(1)/ncols);
    colStep = rowStep;
    end

    if writeOutput
        cd(BBdir)
        mkdir(scanUnitFolder);
    end
    inList = {};
    inTimes = zeros(nrows,ncols);
    inSig = inTimes;
    for j = 1:ncols
        cMin = (j-1)*colStep+1;
        cMax = min(cMin+scanUnitLength, bbSize(2));
        for k = 1:nrows
            rMin = (k-1)*rowStep+1;
            rMax = min(rMin+scanUnitLength, bbSize(1));
            subVolumeij =  bbImage(rMin:rMax, cMin:cMax,:);
            subVolumePixel = [bbLoc(1)+cMin-1, bbLoc(2)+rMin-1, bbLoc(1)+cMax-1, bbLoc(2)+rMax-1];

            %  what can we say about this tile?
            sigPix = subVolumeij>thresh2;
            
            inSig(k,j) = sum(subVolumeij(:)>thresh2)/sum(subVolumeij(:)>thresh1);  % avoid counting voxels above thresh1 at all.
            %  are there any tiles entirely within this volume?
            inList{k,j}=[];
            for ii = 1:numel(iDat.tileLocations)
                iiLoc = iDat.tileLocations{ii};
                t =   [iiLoc(1) subVolumePixel(1) iiLoc(3)  subVolumePixel(3)   iiLoc(2)  subVolumePixel(2) iiLoc(4) subVolumePixel(4) ];
                tVal = [t(1)> t(2) , t(3) < t(4), t(5)> t(6), t(7)<t(8)];
                if sum(tVal)==4
                    inList{k,j} = [inList{k,j}, ii];
                    inTimes(k,j) = inTimes(k,j)+ iDat.allTileTimes(ii)+iDat.estimatedMinLag;
                end
            end
            if writeOutput
                ijFileName = fullfile(BBdir, scanUnitFolder, ['_r_', num2str(k,'%05.0f'), '_c_', num2str(j,'%05.0f'),'_time_',num2str(inTimes(k,j),'%03.0f'), '.v3draw']);
                save_v3d_raw_img_file(subVolumeij, ijFileName);
            end
            
        end
        
        
        
        
    end
    out = inTimes
    out = inSig
    f = figure, subplot(2,2,1), imagesc(inTimes), title(['s2 times in Scan Unit =', num2str(scanUnitLength),'^{2}'])
    colorbar, axis image, 
    subplot(2,2,2)    , imagesc(inSig), title([ num2str(sigFactor), '\sigma foreground map']), axis image
    subplot(2,2,3), imagesc(max(bbImage,[],3)), title('Max Projection'),axis image, 
    
    colormap hot
    subplot(2,2,4), imagesc(iDat.s2Footprint), title('s2 tile map'), axis image, 

end
